First attempt to write test file outside code file
=================================================
Using ``add_integers``
--------------------

>>> add_integer = __import__('0-add_integer').add_integer

we can now use test:

Adding 1 and 6
    >>> add_integer(1, 6)
    7

add negative numbers 55 and -2
    >>> add_integer(55, -2)
    53

Adding 5.1 and 98
    >>> add_integer(5.1)
    103

adding float and negative 100.3 and -2
    >>> add_integer(100.3, -2)
    98

Adding an integer number and a string
    >>> add_integer(4, "Alx")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Passing None
    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Adding a letter and a number
    >>> add_integer('1', 1)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Adding two letters
    >>> add_integer('2', '1')
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Adding a tuple
    >>> add_integer((1, 1))
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Adding a number and a list
    >>> add_integer(123, [])
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Passing a string
    >>> add_integer("Hello")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Adding two float numbers
    >>> add_integer(2.9, 2.9)
    4

Subtracting 98 and 1
    >>> add_integer(-1)
    97

Case Overflow:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Case Overflow 2:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Case NaN:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer
